// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package dto

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson2ac8af59DecodeGithubComMmikhail2001TechnoparkDbProjectInternalAppDeliveryPostDto(in *jlexer.Lexer, out *PostDetailsThreadResponseDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "title":
			out.Title = string(in.String())
		case "author":
			out.Author = string(in.String())
		case "forum":
			out.Forum = string(in.String())
		case "slug":
			out.Slug = string(in.String())
		case "message":
			out.Message = string(in.String())
		case "created":
			out.Created = string(in.String())
		case "votes":
			out.SumVotes = int(in.Int())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2ac8af59EncodeGithubComMmikhail2001TechnoparkDbProjectInternalAppDeliveryPostDto(out *jwriter.Writer, in PostDetailsThreadResponseDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"author\":"
		out.RawString(prefix)
		out.String(string(in.Author))
	}
	{
		const prefix string = ",\"forum\":"
		out.RawString(prefix)
		out.String(string(in.Forum))
	}
	if in.Slug != "" {
		const prefix string = ",\"slug\":"
		out.RawString(prefix)
		out.String(string(in.Slug))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"created\":"
		out.RawString(prefix)
		out.String(string(in.Created))
	}
	{
		const prefix string = ",\"votes\":"
		out.RawString(prefix)
		out.Int(int(in.SumVotes))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PostDetailsThreadResponseDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2ac8af59EncodeGithubComMmikhail2001TechnoparkDbProjectInternalAppDeliveryPostDto(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PostDetailsThreadResponseDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2ac8af59EncodeGithubComMmikhail2001TechnoparkDbProjectInternalAppDeliveryPostDto(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PostDetailsThreadResponseDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2ac8af59DecodeGithubComMmikhail2001TechnoparkDbProjectInternalAppDeliveryPostDto(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PostDetailsThreadResponseDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2ac8af59DecodeGithubComMmikhail2001TechnoparkDbProjectInternalAppDeliveryPostDto(l, v)
}
func easyjson2ac8af59DecodeGithubComMmikhail2001TechnoparkDbProjectInternalAppDeliveryPostDto1(in *jlexer.Lexer, out *PostDetailsResponseDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "post":
			if in.IsNull() {
				in.Skip()
				out.Post = nil
			} else {
				if out.Post == nil {
					out.Post = new(PostDetailsPostResponseDTO)
				}
				(*out.Post).UnmarshalEasyJSON(in)
			}
		case "thread":
			if in.IsNull() {
				in.Skip()
				out.Thread = nil
			} else {
				if out.Thread == nil {
					out.Thread = new(PostDetailsThreadResponseDTO)
				}
				(*out.Thread).UnmarshalEasyJSON(in)
			}
		case "author":
			if in.IsNull() {
				in.Skip()
				out.Author = nil
			} else {
				if out.Author == nil {
					out.Author = new(PostDetailsAuthorResponseDTO)
				}
				(*out.Author).UnmarshalEasyJSON(in)
			}
		case "forum":
			if in.IsNull() {
				in.Skip()
				out.Forum = nil
			} else {
				if out.Forum == nil {
					out.Forum = new(PostDetailsForumResponseDTO)
				}
				(*out.Forum).UnmarshalEasyJSON(in)
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2ac8af59EncodeGithubComMmikhail2001TechnoparkDbProjectInternalAppDeliveryPostDto1(out *jwriter.Writer, in PostDetailsResponseDTO) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Post != nil {
		const prefix string = ",\"post\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Post).MarshalEasyJSON(out)
	}
	if in.Thread != nil {
		const prefix string = ",\"thread\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Thread).MarshalEasyJSON(out)
	}
	if in.Author != nil {
		const prefix string = ",\"author\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Author).MarshalEasyJSON(out)
	}
	if in.Forum != nil {
		const prefix string = ",\"forum\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Forum).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PostDetailsResponseDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2ac8af59EncodeGithubComMmikhail2001TechnoparkDbProjectInternalAppDeliveryPostDto1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PostDetailsResponseDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2ac8af59EncodeGithubComMmikhail2001TechnoparkDbProjectInternalAppDeliveryPostDto1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PostDetailsResponseDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2ac8af59DecodeGithubComMmikhail2001TechnoparkDbProjectInternalAppDeliveryPostDto1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PostDetailsResponseDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2ac8af59DecodeGithubComMmikhail2001TechnoparkDbProjectInternalAppDeliveryPostDto1(l, v)
}
func easyjson2ac8af59DecodeGithubComMmikhail2001TechnoparkDbProjectInternalAppDeliveryPostDto2(in *jlexer.Lexer, out *PostDetailsRequestDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = int(in.Int())
		case "Related":
			if in.IsNull() {
				in.Skip()
				out.Related = nil
			} else {
				in.Delim('[')
				if out.Related == nil {
					if !in.IsDelim(']') {
						out.Related = make([]string, 0, 4)
					} else {
						out.Related = []string{}
					}
				} else {
					out.Related = (out.Related)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Related = append(out.Related, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2ac8af59EncodeGithubComMmikhail2001TechnoparkDbProjectInternalAppDeliveryPostDto2(out *jwriter.Writer, in PostDetailsRequestDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"Related\":"
		out.RawString(prefix)
		if in.Related == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Related {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.String(string(v3))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PostDetailsRequestDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2ac8af59EncodeGithubComMmikhail2001TechnoparkDbProjectInternalAppDeliveryPostDto2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PostDetailsRequestDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2ac8af59EncodeGithubComMmikhail2001TechnoparkDbProjectInternalAppDeliveryPostDto2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PostDetailsRequestDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2ac8af59DecodeGithubComMmikhail2001TechnoparkDbProjectInternalAppDeliveryPostDto2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PostDetailsRequestDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2ac8af59DecodeGithubComMmikhail2001TechnoparkDbProjectInternalAppDeliveryPostDto2(l, v)
}
func easyjson2ac8af59DecodeGithubComMmikhail2001TechnoparkDbProjectInternalAppDeliveryPostDto3(in *jlexer.Lexer, out *PostDetailsPostResponseDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "parent":
			out.Parent = int(in.Int())
		case "author":
			out.Author = string(in.String())
		case "message":
			out.Message = string(in.String())
		case "isEdited":
			out.IsEdited = bool(in.Bool())
		case "forum":
			out.Forum = string(in.String())
		case "thread":
			out.Thread = int(in.Int())
		case "created":
			out.Created = string(in.String())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2ac8af59EncodeGithubComMmikhail2001TechnoparkDbProjectInternalAppDeliveryPostDto3(out *jwriter.Writer, in PostDetailsPostResponseDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"parent\":"
		out.RawString(prefix)
		out.Int(int(in.Parent))
	}
	{
		const prefix string = ",\"author\":"
		out.RawString(prefix)
		out.String(string(in.Author))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"isEdited\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsEdited))
	}
	{
		const prefix string = ",\"forum\":"
		out.RawString(prefix)
		out.String(string(in.Forum))
	}
	{
		const prefix string = ",\"thread\":"
		out.RawString(prefix)
		out.Int(int(in.Thread))
	}
	{
		const prefix string = ",\"created\":"
		out.RawString(prefix)
		out.String(string(in.Created))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PostDetailsPostResponseDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2ac8af59EncodeGithubComMmikhail2001TechnoparkDbProjectInternalAppDeliveryPostDto3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PostDetailsPostResponseDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2ac8af59EncodeGithubComMmikhail2001TechnoparkDbProjectInternalAppDeliveryPostDto3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PostDetailsPostResponseDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2ac8af59DecodeGithubComMmikhail2001TechnoparkDbProjectInternalAppDeliveryPostDto3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PostDetailsPostResponseDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2ac8af59DecodeGithubComMmikhail2001TechnoparkDbProjectInternalAppDeliveryPostDto3(l, v)
}
func easyjson2ac8af59DecodeGithubComMmikhail2001TechnoparkDbProjectInternalAppDeliveryPostDto4(in *jlexer.Lexer, out *PostDetailsForumResponseDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			out.Title = string(in.String())
		case "user":
			out.Author = string(in.String())
		case "slug":
			out.Slug = string(in.String())
		case "posts":
			out.CountPosts = int(in.Int())
		case "threads":
			out.CountThreads = int(in.Int())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2ac8af59EncodeGithubComMmikhail2001TechnoparkDbProjectInternalAppDeliveryPostDto4(out *jwriter.Writer, in PostDetailsForumResponseDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix[1:])
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		out.String(string(in.Author))
	}
	{
		const prefix string = ",\"slug\":"
		out.RawString(prefix)
		out.String(string(in.Slug))
	}
	{
		const prefix string = ",\"posts\":"
		out.RawString(prefix)
		out.Int(int(in.CountPosts))
	}
	{
		const prefix string = ",\"threads\":"
		out.RawString(prefix)
		out.Int(int(in.CountThreads))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PostDetailsForumResponseDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2ac8af59EncodeGithubComMmikhail2001TechnoparkDbProjectInternalAppDeliveryPostDto4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PostDetailsForumResponseDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2ac8af59EncodeGithubComMmikhail2001TechnoparkDbProjectInternalAppDeliveryPostDto4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PostDetailsForumResponseDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2ac8af59DecodeGithubComMmikhail2001TechnoparkDbProjectInternalAppDeliveryPostDto4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PostDetailsForumResponseDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2ac8af59DecodeGithubComMmikhail2001TechnoparkDbProjectInternalAppDeliveryPostDto4(l, v)
}
func easyjson2ac8af59DecodeGithubComMmikhail2001TechnoparkDbProjectInternalAppDeliveryPostDto5(in *jlexer.Lexer, out *PostDetailsAuthorResponseDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "nickname":
			out.Nickname = string(in.String())
		case "fullname":
			out.Fullname = string(in.String())
		case "about":
			out.About = string(in.String())
		case "email":
			out.Email = string(in.String())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2ac8af59EncodeGithubComMmikhail2001TechnoparkDbProjectInternalAppDeliveryPostDto5(out *jwriter.Writer, in PostDetailsAuthorResponseDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"nickname\":"
		out.RawString(prefix[1:])
		out.String(string(in.Nickname))
	}
	{
		const prefix string = ",\"fullname\":"
		out.RawString(prefix)
		out.String(string(in.Fullname))
	}
	{
		const prefix string = ",\"about\":"
		out.RawString(prefix)
		out.String(string(in.About))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PostDetailsAuthorResponseDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2ac8af59EncodeGithubComMmikhail2001TechnoparkDbProjectInternalAppDeliveryPostDto5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PostDetailsAuthorResponseDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2ac8af59EncodeGithubComMmikhail2001TechnoparkDbProjectInternalAppDeliveryPostDto5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PostDetailsAuthorResponseDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2ac8af59DecodeGithubComMmikhail2001TechnoparkDbProjectInternalAppDeliveryPostDto5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PostDetailsAuthorResponseDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2ac8af59DecodeGithubComMmikhail2001TechnoparkDbProjectInternalAppDeliveryPostDto5(l, v)
}
